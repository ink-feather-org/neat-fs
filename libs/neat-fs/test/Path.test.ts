/* eslint-disable import/no-unresolved,node/no-unpublished-import */
import { describe, it } from 'mocha'
import assert from 'assert'
import Path from 'path'

import { NeatFS } from '../src/NeatFS'
import { Path as MyPath } from '../src/Path'

/**
 * NodeJS path compliance tests.
 * These tests only work when node is running on linux.
 */
describe('Path', () => {
  it('split', () => {
    function test(input: string, expected: string[]) {
      console.log('Input:')
      console.log(input)
      const output = MyPath.split(input)
      console.log('Output:')
      console.log(output)
      assert.deepStrictEqual(output, expected)
    }
    test('', ['.', ])
    test('.', ['.', ])
    test('/', ['/', ])
    test('./', ['.', ])
    test('../', ['.', '..', ])
    test('//', ['/', ])
    test('///', ['/', ])
    test('a', ['.', 'a', ])
    test('./a', ['.', 'a', ])
    test('.a', ['.', '.a', ])
    test('/a', ['/', 'a', ])
    test('oof/boi', ['.', 'oof', 'boi', ])
    test('oof/boi/', ['.', 'oof', 'boi', ])
    test('/oof/boi', ['/', 'oof', 'boi', ])
    test('/oof/boi/', ['/', 'oof', 'boi', ])
    test('oof//boi', ['.', 'oof', 'boi', ])
    test('oof///boi', ['.', 'oof', 'boi', ])
  })

  it('isNormalized', () => {
    function test(input: string, expected: boolean) {
      console.log('Input:')
      console.log(input)
      const output = MyPath.isNormalized(input)
      console.log('Output:')
      console.log(output)
      assert.strictEqual(output, expected)
    }
    test('', false)
    test('.', true)
    test('/', true)
    test('/oof', true)
    test('.oof', true)

    test('oof', true)
    test('oof/..', false)
    test('..', false)
    test('oof/.', false)
    test('oof/.a', true)
    test('oof/.a.b', true)
    test('oof/./a', false)
    test('oof/../a', false)

    test('/oof', true)
    test('/oof/..', false)
    test('/..', false)
    test('/oof/.', false)
    test('/oof/.a', true)
    test('/oof/.a.b', true)
    test('/oof/./a', false)
    test('/oof/../a', false)
  })

  it('join', () => {
    function test(...inputs: string[]) {
      const nodeOut = Path.join(...inputs)
      console.log('Input:')
      console.log(inputs)
      console.log('Output:')
      console.log(nodeOut)
      assert.strictEqual(MyPath.join(...inputs), nodeOut)
    }
    test()
    test('')
    test('', '')
    test('.')
    test('..')
    test('/')
    test('/.')
    test('./')
    test('oof')
    test('oof/')
    test('./oof')
    test('/oof')
    test('////////////')
    test('/oof', 'foo')
    test('/oof', '/foo')
  })

  it('resolve', () => {
    const fs = new NeatFS()
    fs.workingDirectory = process.cwd()
    const fsPath = new MyPath(fs)
    function test(...inputs: string[]) {
      const nodeOut = Path.resolve(...inputs)
      console.log('Input:')
      console.log(inputs)
      console.log('Output:')
      console.log(nodeOut)
      assert.strictEqual(fsPath.resolve(...inputs), nodeOut)
    }
    test()
    test('')
    test('', '')
    test('.')
    test('..')
    test('/')
    test('/.')
    test('./')
    test('oof')
    test('oof/')
    test('./oof')
    test('/oof')
    test('////////////')
    test('/oof', 'foo')
    test('/oof', '/foo')
  })

  it('normalize', () => {
    function test(input: string) {
      const nodeOut = Path.normalize(input)
      console.log('Input:')
      console.log(input)
      console.log('Output:')
      console.log(nodeOut)
      assert.strictEqual(MyPath.normalize(input), nodeOut)
    }
    test('')
    test('.')
    test('..')
    test('/')
    test('/.')
    test('./')
    test('oof')
    test('oof/')
    test('./oof')
    test('/oof')
    test('////////////')
    test('/oof/foo')
    test('/oof/foo/')
    test('../')
    test('../../')
    test('/../')
    test('./..')
    test('//////')
    test('a/..')
    test('a/../b')
    test('a/./b')
  })

  it('basename', () => {
    function test(input: string) {
      const nodeOut = Path.basename(input)
      console.log('Input:')
      console.log(input)
      console.log('Output:')
      console.log(nodeOut)
      assert.strictEqual(MyPath.basename(input), nodeOut)
    }
    test('')
    test('.')
    test('..')
    test('/')
    test('/.')
    test('./')
    test('oof')
    test('oof/')
    test('./oof')
    test('/oof')
    test('////////////')
    test('/oof/foo')
    test('/oof/foo/')
    test('../')
    test('../../')
    test('/../')
    test('./..')
    test('//////')
    test('a/..')
    test('a/../b')
    test('a/./b')
    test('/oof/../')
    test('/oof/..')
    test('oof/../')
  })

  it('dirname', () => {
    function test(input: string) {
      const nodeOut = Path.dirname(input)
      console.log('Input:')
      console.log(input)
      console.log('Output:')
      console.log(nodeOut)
      assert.strictEqual(MyPath.dirname(input), nodeOut)
    }
    test('')
    test('.')
    test('..')
    test('/')
    test('/.')
    test('./')
    test('oof')
    test('oof/')
    test('./oof')
    test('/oof')
    test('////////////')
    test('/oof/foo')
    test('/oof/////foo')
    test('/oof/foo/')
    test('../')
    test('../../')
    test('/../')
    test('./..')
    test('//////')
    test('.........//////////////')
    test('a/..')
    test('a/../b')
    test('a/./b')
    test('/oof/../')
    test('/oof/..')
    test('oof/../')
  })

  it('extname', () => {
    function test(input: string) {
      const nodeOut = Path.extname(input)
      console.log('Input:')
      console.log(input)
      console.log('Output:')
      console.log(nodeOut)
      assert.strictEqual(MyPath.extname(input), nodeOut)
    }
    test('')
    test('.')
    test('.oof')
    test('.oof.foo')
    test('oof.foo')
    test('oof.foo.bar')
    test('.oof.foo.bar')
    test('oof.foo.')

    test('/oof')
    test('./foo')
    test('/foo.bar')
    test('/foo.bar.')
    test('/.foo.bar')
    test('/.bar')
  })

  it('relative', () => {
    const fs = new NeatFS()
    fs.workingDirectory = process.cwd()
    const fsPath = new MyPath(fs)
    function test(from: string, to: string) {
      const nodeOut = Path.relative(from, to)
      console.log('Input:')
      console.log(`From: ${from} To: ${to}`)
      console.log('Output:')
      console.log(nodeOut)
      assert.strictEqual(fsPath.relative(from, to), nodeOut)
    }
    test('', '')
    test('oof', '')
    test('', 'oof')
    test('oof', 'oof')

    test('oof/baz', '')

    test('bar', 'baz')
    test('oof/foo', 'foo/oof')
    test('oof/foo/', 'foo/oof')
    test('oof/foo', 'foo/oof/')
    test('oof/foo/', 'foo/oof/')
    test('/oof/foo', '/foo/oof')
  })
})
